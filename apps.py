# -*- coding: utf-8 -*-
"""apps.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18aYzedwGH3h9bc5BM3R05blFnJxHXbJP
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install gevent

from __future__ import division, print_function
# coding=utf-8
import sys
import os
import glob
import re
import numpy as np

# Keras
from keras.applications.imagenet_utils import preprocess_input, decode_predictions
from keras.models import load_model
from keras.preprocessing import image

# Flask utils
from flask import Flask, redirect, url_for, request, render_template
from werkzeug.utils import secure_filename
from gevent.pywsgi import WSGIServer

# Define a flask app
app = Flask(__name__)

# Model saved with Keras model.save()
MODEL_PATH = '/content/drive/My Drive/Project Dataset/model1.h5'

# Load your trained model
model = load_model(MODEL_PATH)
#model._make_predict_function()          # Necessary
# print('Model loaded. Start serving...')

# You can also use pretrained model from Keras
# Check https://keras.io/applications/
#from keras.applications.resnet50 import ResNet50
#model = ResNet50(weights='imagenet')
#model.save('')
print('Model loaded.')
# Check http://127.0.0.1:5000/

def model_predict(img_path, model):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array=image.img_to_array(img)
    img_array = img_array / 255
    new_array = cv2.resize(img_array, (224, 224))
    return new_array.reshape(-1, 224, 224, 3)
    # Preprocessing the image
    #x = image.img_to_array(img)
    # x = np.true_divide(x, 255)
    #x = np.expand_dims(x, axis=0)

    # Be careful how your trained model deals with the input
    # otherwise, it won't make correct prediction!
    #x = preprocess_input(x, mode='caffe')
    prediction = model.predict([prepare(img_path)])
    np.argmax(prediction)
    #preds = model.predict(x)
    if np.argmax(prediction) == 0:
      print("Bacterial_spot")
    elif np.argmax(prediction) == 1:
      print("Early_Blight")
    elif np.argmax(prediction) == 2:
      print("Late Blight")
    elif np.argmax(prediction) == 3:
      print("Leaf Mold")
    elif np.argmax(prediction) == 4:
      print("Septoria Leaf Mold")
    elif np.argmax(prediction) == 5:
      print("Spider mites")
    elif np.argmax(prediction) == 6:
      print("Target Spot")
    elif np.argmax(prediction) == 7:
      print("Yellow Leaf Curl Virus")
    elif np.argmax(prediction) == 8:
      print("Mosaic Virus")
    else:
      print("Healthy")
    return preds


@app.route('/', methods=['GET'])
def index():
    # Main page
    return render_template('/content/drive/My Drive/Project Dataset/index.html')


@app.route('/predict', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST':
        # Get the file from post request
        f = request.files['file']

        # Save the file to ./uploads
        basepath = os.path.dirname(__file__)
        file_path = os.path.join(
            basepath, 'uploads', secure_filename(f.filename))
        f.save(file_path)

        # Make prediction
        prediction = model_predict(file_path, model)

        # Process your result for human
        # pred_class = preds.argmax(axis=-1)            # Simple argmax
        pred_class = decode_predictions(prediction, top=1)   # ImageNet Decode
        result = str(pred_class[0][0][1])               # Convert to string
        return result
    return None


if __name__ == '__main__':
    app.run(debug=True)